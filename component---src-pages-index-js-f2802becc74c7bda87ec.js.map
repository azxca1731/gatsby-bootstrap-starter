{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/Adsense/index.js","webpack:///./src/templates/Post/index.js"],"names":["BlogIndex","_ref","data","location","posts","get","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","components_Layout__WEBPACK_IMPORTED_MODULE_5__","components_Meta__WEBPACK_IMPORTED_MODULE_4__","site","map","_ref2","i","post","templates_Post__WEBPACK_IMPORTED_MODULE_3__","options","isIndex","key","pageQuery","Adsense","componentDidMount","this","props","clientId","window","adsbygoogle","push","render","_this$props","slotId","format","react_default","className","style","display","data-ad-client","data-ad-slot","data-ad-format","React","Component","getAd","Post","_data$frontmatter","frontmatter","category","tags","description","title","path","date","image","adsense","html","isMore","match","fixed","disqusConfig","url","MY_URL","identifier","gatsby_browser_entry","boxShadow","to","dateTime","Badges","items","primary","gatsby_image_default","width","dangerouslySetInnerHTML","__html","getDescription","Button","label","lib_default","DiscussionEmbed","shortname","config","components_Adsense","body","replace","split","_ref3","item"],"mappings":"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","file":"component---src-pages-index-js-f2802becc74c7bda87ec.js","sourcesContent":["import { graphql } from 'gatsby'\nimport React from 'react'\nimport get from 'lodash/get'\n\nimport Post from 'templates/Post'\nimport Meta from 'components/Meta'\nimport Layout from 'components/Layout'\n\nconst BlogIndex = ({ data, location }) => {\n  const posts = get(data, 'remark.posts')\n  return (\n    <Layout location={location}>\n      <Meta site={get(data, 'site.meta')} />\n      {posts.map(({ post }, i) => (\n        <Post\n          data={post}\n          options={{\n            isIndex: true,\n          }}\n          key={i}\n        />\n      ))}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    site {\n      meta: siteMetadata {\n        title\n        description\n        url: siteUrl\n        author\n        twitter\n        adsense\n      }\n    }\n    remark: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      posts: edges {\n        post: node {\n          html\n          frontmatter {\n            layout\n            title\n            path\n            category\n            tags\n            description\n            date(formatString: \"YYYY/MM/DD\")\n            image {\n              childImageSharp {\n                fixed(width: 500) {\n                  ...GatsbyImageSharpFixed_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n\nclass Adsense extends React.Component {\n  componentDidMount() {\n    const { clientId } = this.props\n    if (clientId) {\n      ;(window.adsbygoogle = window.adsbygoogle || []).push({})\n    }\n  }\n\n  render() {\n    const { clientId, slotId, format } = this.props\n\n    return clientId ? (\n      <div className=\"ad\">\n        <ins\n          className=\"adsbygoogle\"\n          style={{ display: 'block' }}\n          data-ad-client={clientId}\n          data-ad-slot={slotId}\n          data-ad-format={format}\n        />\n      </div>\n    ) : (\n      ''\n    )\n  }\n}\nexport default Adsense\n","import { Link } from 'gatsby'\nimport get from 'lodash/get'\nimport React from 'react'\nimport map from 'lodash/map'\nimport Img from 'gatsby-image'\n\nimport Adsense from 'components/Adsense'\nimport Footer from 'components/Footer'\nimport Disqus from 'disqus-react'\nimport './style.scss'\n\nconst MY_URL = 'https://azxca1731.netlify.com'\n\nconst Post = ({ data, options }) => {\n  const {\n    category,\n    tags,\n    description,\n    title,\n    path,\n    date,\n    image,\n  } = data.frontmatter\n  const { isIndex, adsense } = options\n  const html = get(data, 'html')\n  const isMore = isIndex && !!html.match('<!--more-->')\n  const fixed = get(image, 'childImageSharp.fixed')\n  const disqusShortname = 'nogada-develop-blog'\n  const disqusConfig = {\n    url: `${MY_URL}/${path}`,\n    identifier: path,\n    title,\n  }\n  return (\n    <div className=\"article\" key={path}>\n      <div className=\"container\">\n        <div className=\"info\">\n          <Link style={{ boxShadow: 'none' }} to={path}>\n            <h1>{title}</h1>\n            <time dateTime={date}>{date}</time>\n          </Link>\n          {Badges({ items: [category], primary: true })}\n          {Badges({ items: tags })}\n        </div>\n        <div className=\"content\">\n          <p>{description}</p>\n          {fixed ? (\n            <div className=\"col-12\">\n              <Img fixed={fixed} style={{ width: '100%' }} />\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={{\n            __html: isMore ? getDescription(html) : html,\n          }}\n        />\n        {isMore ? Button({ path, label: 'MORE', primary: true }) : ''}\n        {getAd(isIndex, adsense)}\n        {isIndex ? (\n          ''\n        ) : (\n          <Disqus.DiscussionEmbed\n            shortname={disqusShortname}\n            config={disqusConfig}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n\nconst getAd = (isIndex, adsense) => {\n  return !isIndex ? <Adsense clientId={adsense} slotId=\"\" format=\"auto\" /> : ''\n}\n\nconst getDescription = body => {\n  body = body.replace(/<blockquote>/g, '<blockquote class=\"blockquote\">')\n  if (body.match('<!--more-->')) {\n    body = body.split('<!--more-->')\n    if (typeof body[0] !== 'undefined') {\n      return body[0]\n    }\n  }\n  return body\n}\n\nconst Button = ({ path, label, primary }) => (\n  <Link className=\"readmore\" to={path}>\n    <span\n      className={`btn btn-outline-primary btn-block ${\n        primary ? 'btn-outline-primary' : 'btn-outline-secondary'\n      }`}\n    >\n      {label}\n    </span>\n  </Link>\n)\n\nconst Badges = ({ items, primary }) =>\n  map(items, (item, i) => {\n    return (\n      <span\n        className={`badge ${primary ? 'badge-primary' : 'badge-secondary'}`}\n        key={i}\n      >\n        {item}\n      </span>\n    )\n  })\n"],"sourceRoot":""}